ID: 1
Stack(2): [cnt, { { { { { { { { { writeHeap(v1,2); writeHeap(v2,3) }; writeHeap(v3,4) }; newLatch(cnt,readHeap(v2)) }; fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }) }; fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }) }; fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }) }; await(cnt) }; cnt }; countDown(cnt) }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(3): [cnt, countDown(cnt), { { { { { { { { writeHeap(v1,2); writeHeap(v2,3) }; writeHeap(v3,4) }; newLatch(cnt,readHeap(v2)) }; fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }) }; fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }) }; fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }) }; await(cnt) }; cnt }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(4): [cnt, countDown(cnt), cnt, { { { { { { { writeHeap(v1,2); writeHeap(v2,3) }; writeHeap(v3,4) }; newLatch(cnt,readHeap(v2)) }; fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }) }; fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }) }; fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }) }; await(cnt) }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(5): [cnt, countDown(cnt), cnt, await(cnt), { { { { { { writeHeap(v1,2); writeHeap(v2,3) }; writeHeap(v3,4) }; newLatch(cnt,readHeap(v2)) }; fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }) }; fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }) }; fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }) }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(6): [cnt, countDown(cnt), cnt, await(cnt), fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }), { { { { { writeHeap(v1,2); writeHeap(v2,3) }; writeHeap(v3,4) }; newLatch(cnt,readHeap(v2)) }; fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }) }; fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }) }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(7): [cnt, countDown(cnt), cnt, await(cnt), fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }), fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }), { { { { writeHeap(v1,2); writeHeap(v2,3) }; writeHeap(v3,4) }; newLatch(cnt,readHeap(v2)) }; fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }) }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(8): [cnt, countDown(cnt), cnt, await(cnt), fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }), fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }), fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }), { { { writeHeap(v1,2); writeHeap(v2,3) }; writeHeap(v3,4) }; newLatch(cnt,readHeap(v2)) }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(9): [cnt, countDown(cnt), cnt, await(cnt), fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }), fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }), fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }), newLatch(cnt,readHeap(v2)), { { writeHeap(v1,2); writeHeap(v2,3) }; writeHeap(v3,4) }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(10): [cnt, countDown(cnt), cnt, await(cnt), fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }), fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }), fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }), newLatch(cnt,readHeap(v2)), writeHeap(v3,4), { writeHeap(v1,2); writeHeap(v2,3) }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(11): [cnt, countDown(cnt), cnt, await(cnt), fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }), fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }), fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }), newLatch(cnt,readHeap(v2)), writeHeap(v3,4), writeHeap(v2,3), writeHeap(v1,2)]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(10): [cnt, countDown(cnt), cnt, await(cnt), fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }), fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }), fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }), newLatch(cnt,readHeap(v2)), writeHeap(v3,4), writeHeap(v2,3)]
SymbolTable(1): {v1=2}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(1): {2=2}

ID: 1
Stack(9): [cnt, countDown(cnt), cnt, await(cnt), fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }), fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }), fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }), newLatch(cnt,readHeap(v2)), writeHeap(v3,4)]
SymbolTable(2): {v1=2, v2=3}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(2): {2=2, 3=3}

ID: 1
Stack(8): [cnt, countDown(cnt), cnt, await(cnt), fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }), fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }), fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) }), newLatch(cnt,readHeap(v2))]
SymbolTable(3): {v1=2, v2=3, v3=4}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(3): {2=2, 3=3, 4=4}

ID: 1
Stack(7): [cnt, countDown(cnt), cnt, await(cnt), fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }), fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) }), fork({ { writeHeap(v1,(readHeap(v1) * 10)); readHeap(v1) }; countDown(cnt) })]
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(0): []
FileTable(0): 
LatchTable: {0=3}
Heap(3): {2=2, 3=3, 4=4}

ID: 1
Stack(6): [cnt, countDown(cnt), cnt, await(cnt), fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) }), fork({ { writeHeap(v2,(readHeap(v2) * 10)); readHeap(v2) }; countDown(cnt) })]
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(0): []
FileTable(0): 
LatchTable: {0=3}
Heap(3): {2=2, 3=3, 4=4}

ID: 1
Stack(5): [cnt, countDown(cnt), cnt, await(cnt), fork({ { writeHeap(v3,(readHeap(v3) * 10)); readHeap(v3) }; countDown(cnt) })]
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(0): []
FileTable(0): 
LatchTable: {0=3}
Heap(3): {2=2, 3=3, 4=4}

ID: 1
Stack(4): [cnt, countDown(cnt), cnt, await(cnt)]
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(0): []
FileTable(0): 
LatchTable: {0=3}
Heap(3): {2=2, 3=3, 4=4}

ID: 1
Stack(4): [cnt, countDown(cnt), cnt, await(cnt)]
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(0): []
FileTable(0): 
LatchTable: {0=3}
Heap(3): {2=20, 3=3, 4=4}

ID: 1
Stack(4): [cnt, countDown(cnt), cnt, await(cnt)]
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(1): [20]
FileTable(0): 
LatchTable: {0=3}
Heap(3): {2=20, 3=30, 4=4}

ID: 1
Stack(4): [cnt, countDown(cnt), cnt, await(cnt)]
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(3): [20, 2, 30]
FileTable(0): 
LatchTable: {0=2}
Heap(3): {2=20, 3=30, 4=40}

ID: 1
Stack(4): [cnt, countDown(cnt), cnt, await(cnt)]
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(5): [20, 2, 30, 3, 40]
FileTable(0): 
LatchTable: {0=1}
Heap(3): {2=20, 3=30, 4=40}

ID: 1
Stack(4): [cnt, countDown(cnt), cnt, await(cnt)]
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(6): [20, 2, 30, 3, 40, 4]
FileTable(0): 
LatchTable: {0=0}
Heap(3): {2=20, 3=30, 4=40}

ID: 1
Stack(3): [cnt, countDown(cnt), cnt]
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(6): [20, 2, 30, 3, 40, 4]
FileTable(0): 
LatchTable: {0=0}
Heap(3): {2=20, 3=30, 4=40}

ID: 1
Stack(2): [cnt, countDown(cnt)]
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(7): [20, 2, 30, 3, 40, 4, 0]
FileTable(0): 
LatchTable: {0=0}
Heap(3): {2=20, 3=30, 4=40}

ID: 1
Stack(1): [cnt]
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(7): [20, 2, 30, 3, 40, 4, 0]
FileTable(0): 
LatchTable: {0=0}
Heap(3): {2=20, 3=30, 4=40}

ID: 1
Stack(0): []
SymbolTable(4): {cnt=0, v1=2, v2=3, v3=4}
Output(8): [20, 2, 30, 3, 40, 4, 0, 0]
FileTable(0): 
LatchTable: {0=0}
Heap(3): {2=20, 3=30, 4=40}

ID: 1
Stack(2): [(v * 10), { { { { { v = 0; repeat { fork({ v; v = (v - 1) }); v = (v + 1) } until v==3 }; x = 1 }; y = 2 }; z = 3 }; w = 4 }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(3): [(v * 10), w = 4, { { { { v = 0; repeat { fork({ v; v = (v - 1) }); v = (v + 1) } until v==3 }; x = 1 }; y = 2 }; z = 3 }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(4): [(v * 10), w = 4, z = 3, { { { v = 0; repeat { fork({ v; v = (v - 1) }); v = (v + 1) } until v==3 }; x = 1 }; y = 2 }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(5): [(v * 10), w = 4, z = 3, y = 2, { { v = 0; repeat { fork({ v; v = (v - 1) }); v = (v + 1) } until v==3 }; x = 1 }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(6): [(v * 10), w = 4, z = 3, y = 2, x = 1, { v = 0; repeat { fork({ v; v = (v - 1) }); v = (v + 1) } until v==3 }]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(7): [(v * 10), w = 4, z = 3, y = 2, x = 1, repeat { fork({ v; v = (v - 1) }); v = (v + 1) } until v==3, v = 0]
SymbolTable(0): {}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(6): [(v * 10), w = 4, z = 3, y = 2, x = 1, repeat { fork({ v; v = (v - 1) }); v = (v + 1) } until v==3]
SymbolTable(1): {v=0}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(6): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) })]
SymbolTable(1): {v=0}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(7): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) }), { fork({ v; v = (v - 1) }); v = (v + 1) }]
SymbolTable(1): {v=0}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(8): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) }), v = (v + 1), fork({ v; v = (v - 1) })]
SymbolTable(1): {v=0}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(7): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) }), v = (v + 1)]
SymbolTable(1): {v=0}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(6): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) })]
SymbolTable(1): {v=1}
Output(0): []
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(7): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) }), { fork({ v; v = (v - 1) }); v = (v + 1) }]
SymbolTable(1): {v=1}
Output(1): [0]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(8): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) }), v = (v + 1), fork({ v; v = (v - 1) })]
SymbolTable(1): {v=1}
Output(1): [0]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(7): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) }), v = (v + 1)]
SymbolTable(1): {v=1}
Output(1): [0]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(6): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) })]
SymbolTable(1): {v=2}
Output(1): [0]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(7): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) }), { fork({ v; v = (v - 1) }); v = (v + 1) }]
SymbolTable(1): {v=2}
Output(2): [0, 1]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(8): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) }), v = (v + 1), fork({ v; v = (v - 1) })]
SymbolTable(1): {v=2}
Output(2): [0, 1]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(7): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) }), v = (v + 1)]
SymbolTable(1): {v=2}
Output(2): [0, 1]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(6): [(v * 10), w = 4, z = 3, y = 2, x = 1, while(0==v==3) do({ fork({ v; v = (v - 1) }); v = (v + 1) })]
SymbolTable(1): {v=3}
Output(2): [0, 1]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(5): [(v * 10), w = 4, z = 3, y = 2, x = 1]
SymbolTable(1): {v=3}
Output(3): [0, 1, 2]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(4): [(v * 10), w = 4, z = 3, y = 2]
SymbolTable(2): {v=3, x=1}
Output(3): [0, 1, 2]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(3): [(v * 10), w = 4, z = 3]
SymbolTable(3): {v=3, x=1, y=2}
Output(3): [0, 1, 2]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(2): [(v * 10), w = 4]
SymbolTable(4): {v=3, x=1, y=2, z=3}
Output(3): [0, 1, 2]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(1): [(v * 10)]
SymbolTable(5): {v=3, w=4, x=1, y=2, z=3}
Output(3): [0, 1, 2]
FileTable(0): 
LatchTable: {}
Heap(0): {}

ID: 1
Stack(0): []
SymbolTable(5): {v=3, w=4, x=1, y=2, z=3}
Output(4): [0, 1, 2, 30]
FileTable(0): 
LatchTable: {}
Heap(0): {}

